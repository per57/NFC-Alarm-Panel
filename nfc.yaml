esphome:
  name: nfc
  friendly_name: nfc
  platform: ESP8266
  board: nodemcuv2

  on_boot:
    priority: 500
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 0%
        green: 0%
        blue: 100%
    - wait_until:
        api.connected:
    - logger.log: API is connected!

# Enable logging
logger:
  level: INFO
  
# Enable Home Assistant API
api:
  encryption:
    key: !secret nfc_api_key

ota:
  password: !secret nfc_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password



text_sensor:
  - platform: template
    name: "RFID Tag"
    id: rfid_tag

  - platform: homeassistant
    id: alarm_state
    entity_id: sensor.alarm_state
    internal: true
    on_value:
      then:
        - binary_sensor.template.publish:
            id: led_control
            state: OFF
        - output.turn_off: buzzer
        - light.turn_on:
                    id: activity_led
                    brightness: 25%
                    red: 0%
                    green: 100%
                    blue: 0% 
        - if:
            condition:
              lambda: 'return (id(alarm_state).state == "arming");'
            then:
             - light.turn_on:
                id: activity_led
                brightness: 100%
                red: 100%
                green: 100%
                blue: 0%   
             - binary_sensor.template.publish:
                id: led_control
                state: ON
            else:
              if:
                condition:
                  lambda: 'return (id(alarm_state).state == "armed_away");'
                then:
                - binary_sensor.template.publish:
                   id: led_control
                   state: OFF
                - light.turn_on:
                    id: activity_led
                    brightness: 100%
                    red: 100%
                    green: 0%
                    blue: 0%
                else:
                  if:
                    condition:
                      lambda: 'return (id(alarm_state).state == "triggered");'
                    then:
                    - binary_sensor.template.publish:
                       id: led_control
                       state: ON
                    - light.turn_on:
                        id: activity_led
                        brightness: 100%
                        red: 100%
                        green: 0%
                        blue: 0%
                    else:
                      if:
                        condition:
                          lambda: 'return (id(alarm_state).state == "pending");'
                        then:
                        - light.turn_on:
                            id: activity_led
                            brightness: 100%
                            red: 100%
                            green: 0%
                            blue: 0%   
                        - binary_sensor.template.publish:
                            id: led_control
                            state: ON
                        - output.turn_on: buzzer
                        - delay: 200ms
                        - output.turn_off: buzzer
                        - delay: 200ms
                        - output.turn_on: buzzer
                        - delay: 200ms
                        - output.turn_off: buzzer


binary_sensor:
  - platform: template
    name: "Control Led"
    id: led_control
    internal: true
    on_state:
      - while:
          condition:
            binary_sensor.is_on: led_control
          then:
          - light.turn_on: activity_led
          - delay: 200ms
          - light.turn_off: activity_led
          - delay: 500ms

  - platform: status
    name: "Connected to HA"
    id: connected_to_ha
    internal: true
    on_state:
      - while:
          condition:
            binary_sensor.is_off: connected_to_ha
          then:
          - light.turn_on:
             id: activity_led
             brightness: 100%
             red: 0%
             green: 0%
             blue: 100%
          - delay: 200ms
          - light.turn_off: activity_led
          - delay: 500ms
    
sensor:
  - platform: wifi_signal
    id: wifi_s
    name: "WiFi Signal"
    update_interval: 300s

spi:
  clk_pin: D3
  miso_pin: D1
  mosi_pin: D2

rc522_spi: # or rc522_i2c
  cs_pin: D4
  reset_pin: D5
  update_interval: 1s
  on_tag:
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 0%
        green: 100%
        blue: 0%
    - output.turn_on: buzzer
    - delay: 200ms
    - output.turn_off: buzzer
    - delay: 100ms
    - light.turn_off: activity_led
    - delay: 100ms
    - light.turn_on: activity_led
    - delay: 300ms
    - light.turn_off: activity_led
    - homeassistant.tag_scanned: !lambda 'return x;'
    - text_sensor.template.publish:
        id: rfid_tag
        state: !lambda 'return x;'


output:
# Define the buzzer output
- platform: gpio
  pin: D6
  id: buzzer

# Configure LED
light:
- platform: neopixelbus
  variant: WS2812
  pin: D7
  num_leds: 1
  default_transition_length: 0s
  type: GRB
  id: activity_led
  name: Alarm LED
  restore_mode: ALWAYS_OFF
    